package main

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strings"
)

// formatAndValidateKey –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á
func formatAndValidateKey(input string) (string, error) {
	input = strings.TrimSpace(input)
	input = strings.ReplaceAll(input, " ", "_")
	input = strings.ToUpper(input)

	match, _ := regexp.MatchString(`^[A-Z_]+$`, input)
	if !match {
		return "", fmt.Errorf("–∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (–±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)")
	}

	if !strings.HasSuffix(input, "_KEY") {
		input += "_KEY"
	}

	return input, nil
}

// validateValue –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É
func validateValue(input string) (string, error) {
	input = strings.TrimSpace(input)
	match, _ := regexp.MatchString(`[–∞-—è–ê-–Ø—ë–Å]`, input)
	if match {
		return "", fmt.Errorf("–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ (–±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)")
	}
	return input, nil
}

// promptValidInput ‚Äî –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
func promptValidInput(promptText string, validator func(string) (string, error)) string {
	reader := bufio.NewReader(os.Stdin)
	for {
		fmt.Print(promptText)
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		validated, err := validator(input)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
			continue
		}
		return validated
	}
}

// readEnvFileToMap —á–∏—Ç–∞–µ—Ç .env –≤ –∫–∞—Ä—Ç—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
func readEnvFileToMap(filePath string) (map[string]string, error) {
	env := make(map[string]string)

	file, err := os.OpenFile(filePath, os.O_RDONLY|os.O_CREATE, 0644)
	if err != nil {
		return env, err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.TrimSpace(line) == "" || strings.HasPrefix(line, "#") {
			continue
		}
		parts := strings.SplitN(line, "=", 2)
		if len(parts) == 2 {
			env[strings.TrimSpace(parts[0])] = strings.TrimSpace(parts[1])
		}
	}
	return env, nil
}

// writeEnvMap —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env
func writeEnvMap(filePath string, envMap map[string]string) error {
	var newLines []string
	for k, v := range envMap {
		newLines = append(newLines, fmt.Sprintf("%s=%s", k, v))
	}
	return os.WriteFile(filePath, []byte(strings.Join(newLines, "\n")+"\n"), 0644)
}

// promptOverwriteConfirmation —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–∞—ë—Ç 3 –ø–æ–ø—ã—Ç–∫–∏
func promptOverwriteConfirmation(originalInput, currentValue string) bool {
	reader := bufio.NewReader(os.Stdin)
	fmt.Printf("‚ö†Ô∏è  –ö–ª—é—á \"%s\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ? (yes/no): ", originalInput)
	confirm, _ := reader.ReadString('\n')
	confirm = strings.ToLower(strings.TrimSpace(confirm))

	if confirm != "yes" {
		fmt.Println("‚õî –û—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
		return false
	}

	const maxAttempts = 3
	for attempts := 1; attempts <= maxAttempts; attempts++ {
		fmt.Printf("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ %d –∏–∑ %d): ", attempts, maxAttempts)
		entered, _ := reader.ReadString('\n')
		entered = strings.TrimSpace(entered)

		if entered == currentValue {
			return true
		}
		fmt.Println("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
	}

	fmt.Println("‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
	return false
}

// AddOrUpdateEnvVarSecure –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—ée
func AddOrUpdateEnvVarSecure(filePath, originalInput, key, value string) (added, updated bool, err error) {
	envMap, err := readEnvFileToMap(filePath)
	if err != nil {
		return false, false, err
	}

	currentValue, exists := envMap[key]
	if exists {
		if !promptOverwriteConfirmation(originalInput, currentValue) {
			return false, false, nil
		}
		envMap[key] = value
		err = writeEnvMap(filePath, envMap)
		return false, true, err
	}

	envMap[key] = value
	err = writeEnvMap(filePath, envMap)
	return true, false, err
}

func main() {
	fmt.Println("üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env")

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ (–¥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
	originalKeyInput := promptValidInput("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: db password): ", func(s string) (string, error) {
		return s, nil
	})

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω–æ
	formattedKey, err := formatAndValidateKey(originalKeyInput)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
		return
	}

	value := promptValidInput("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞): ", validateValue)

	added, updated, err := AddOrUpdateEnvVarSecure(".env", originalKeyInput, formattedKey, value)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", err)
		return
	}

	if added {
		fmt.Println("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
	} else if updated {
		fmt.Println("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
	}
}
